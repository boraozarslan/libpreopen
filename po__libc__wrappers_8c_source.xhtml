<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>libpreopen: lib/po_libc_wrappers.c Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">libpreopen
   &#160;<span id="projectnumber">v0.0.1</span>
   </div>
   <div id="projectbrief">Library for pre-opening file descriptors</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('po__libc__wrappers_8c_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">po_libc_wrappers.c</div>  </div>
</div><!--header-->
<div class="contents">
<a href="po__libc__wrappers_8c.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*-</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016 Stanley Uche Godfrey</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * Copyright (c) 2018 Jonathan Anderson</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * All rights reserved.</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * This software was developed at Memorial University under the</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * NSERC Discovery program (RGPIN-2015-06048).</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * Redistribution and use in source and binary forms, with or without</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * modification, are permitted provided that the following conditions</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * are met:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * 1. Redistributions of source code must retain the above copyright</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *    notice, this list of conditions and the following disclaimer.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * 2. Redistributions in binary form must reproduce the above copyright</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *    notice, this list of conditions and the following disclaimer in the</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *    documentation and/or other materials provided with the distribution.</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS&#39;&#39; AND</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment"> * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment"> * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"> * SUCH DAMAGE.</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">/**</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"> * @file   po_libc_wrappers.c</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment"> * @brief  Wrappers of libc functions that access global variables.</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;sys/stat.h&gt;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;sys/types.h&gt;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;fcntl.h&gt;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &lt;stdarg.h&gt;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;stdlib.h&gt;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &lt;unistd.h&gt;</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="internal_8h.xhtml">internal.h</a>&quot;</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">/**</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> * A default po_map that can be used implicitly by libc wrappers.</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> * @internal</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structpo__map.xhtml">po_map</a> *global_map;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">/**</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"> * Find a relative path within the po_map given by SHARED_MEMORYFD (if it</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> * exists).</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"> * @returns  a struct po_relpath with dirfd and relative_path as set by po_find</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"> *           if there is an available po_map, or AT_FDCWD/path otherwise</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structpo__relpath.xhtml">po_relpath</a> find_relative(const char *path, cap_rights_t *);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">/**</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"> * Get the map that was handed into the process via `SHARED_MEMORYFD`</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"> * (if it exists).</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structpo__map.xhtml">po_map</a>*   get_shared_map(<span class="keywordtype">void</span>);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">/**</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"> * Capability-safe wrapper around the `access(2)` system call.</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"> * `access(2)` accepts a path argument that can reference the global filesystem</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> * namespace. This is not a capability-safe operation, so this wrapper function</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> * attempts to look up the path (or a prefix of it) within the current global</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"> * po_map and converts the call into the capability-safe `faccessat(2)` if</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"> * possible. If the current po_map does not contain the sought-after path,</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> * this wrapper will call `faccessat(AT_FDCWD, original_path, ...)`, which is</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> * the same as the unwrapped `access(2)` call.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keywordtype">int</span></div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="po__libc__wrappers_8c.xhtml#aeff22ad09b35eda92f6c5632300b05da">   81</a></span>&#160;<a class="code" href="po__libc__wrappers_8c.xhtml#aeff22ad09b35eda92f6c5632300b05da">access</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path, <span class="keywordtype">int</span> mode)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keyword">struct </span><a class="code" href="structpo__relpath.xhtml">po_relpath</a> rel = find_relative(path, NULL);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordflow">return</span> faccessat(rel.<a class="code" href="structpo__relpath.xhtml#adbfd907732d872907ff53dee0c17dade">dirfd</a>, rel.<a class="code" href="structpo__relpath.xhtml#a5315273ae3c6bee251348895e97f951f">relative_path</a>, mode,0);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">/**</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"> * Capability-safe wrapper around the `open(2)` system call.</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"> * `open(2)` accepts a path argument that can reference the global filesystem</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"> * namespace. This is not a capability-safe operation, so this wrapper function</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"> * attempts to look up the path (or a prefix of it) within the current global</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"> * po_map and converts the call into the capability-safe `openat(2)` if</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"> * possible. If the current po_map does not contain the sought-after path,</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment"> * this wrapper will call `openat(AT_FDCWD, original_path, ...)`, which is</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"> * the same as the unwrapped `open(2)` call.</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="keywordtype">int</span></div><div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="po__libc__wrappers_8c.xhtml#ad586f56cb2d7d849a4cb20dbd792b543">  100</a></span>&#160;<a class="code" href="po__libc__wrappers_8c.xhtml#ad586f56cb2d7d849a4cb20dbd792b543">open</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path, <span class="keywordtype">int</span> flags, ...)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;{</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keyword">struct </span><a class="code" href="structpo__relpath.xhtml">po_relpath</a> rel;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        va_list args;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordtype">int</span> mode;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        va_start(args, flags);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        mode = va_arg(args, <span class="keywordtype">int</span>);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        rel = find_relative(path, NULL);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">return</span> openat(rel.<a class="code" href="structpo__relpath.xhtml#adbfd907732d872907ff53dee0c17dade">dirfd</a>, rel.<a class="code" href="structpo__relpath.xhtml#a5315273ae3c6bee251348895e97f951f">relative_path</a>, flags, mode);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">/**</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"> * Capability-safe wrapper around the `stat(2)` system call.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"> * `stat(2)` accepts a path argument that can reference the global filesystem</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"> * namespace. This is not a capability-safe operation, so this wrapper function</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"> * attempts to look up the path (or a prefix of it) within the current global</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"> * po_map and converts the call into the capability-safe `fstatat(2)` if</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"> * possible. If the current po_map does not contain the sought-after path,</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"> * this wrapper will call `fstatat(AT_FDCWD, original_path, ...)`, which is</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"> * the same as the unwrapped `stat(2)` call.</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keywordtype">int</span></div><div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="po__libc__wrappers_8c.xhtml#a8c608fe4dce7b9f98d38263bd30bef56">  125</a></span>&#160;<a class="code" href="po__libc__wrappers_8c.xhtml#a8c608fe4dce7b9f98d38263bd30bef56">stat</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path, <span class="keyword">struct</span> <a class="code" href="po__libc__wrappers_8c.xhtml#a8c608fe4dce7b9f98d38263bd30bef56">stat</a> *st)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keyword">struct </span><a class="code" href="structpo__relpath.xhtml">po_relpath</a> rel = find_relative(path, NULL);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">return</span> fstatat(rel.<a class="code" href="structpo__relpath.xhtml#adbfd907732d872907ff53dee0c17dade">dirfd</a>, rel.<a class="code" href="structpo__relpath.xhtml#a5315273ae3c6bee251348895e97f951f">relative_path</a>,st,AT_SYMLINK_NOFOLLOW);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="keyword">struct </span><a class="code" href="structpo__map.xhtml">po_map</a>*</div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="po__libc__wrappers_8c.xhtml#aa6efc2a19280af103c2ed8f60ac5721b">  133</a></span>&#160;<a class="code" href="po__libc__wrappers_8c.xhtml#aa6efc2a19280af103c2ed8f60ac5721b">po_map_get</a>()</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">if</span> (global_map == NULL) {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                global_map = <a class="code" href="libpreopen_8h.xhtml#a26cc887be5b3bc545b05b6585d633073">po_map_create</a>(4);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">if</span> (global_map != NULL) {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <a class="code" href="po__err_8c.xhtml#a67a367198c38d11149314c86191cdcb8">po_map_assertvalid</a>(global_map);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        global_map-&gt;refcount += 1;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">return</span> (global_map);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keywordtype">void</span></div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="po__libc__wrappers_8c.xhtml#a8d9b3c7a824de9fdcfaab67f2622aaf2">  149</a></span>&#160;<a class="code" href="po__libc__wrappers_8c.xhtml#a8d9b3c7a824de9fdcfaab67f2622aaf2">po_map_set</a>(<span class="keyword">struct</span> <a class="code" href="structpo__map.xhtml">po_map</a> *map)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <a class="code" href="po__err_8c.xhtml#a67a367198c38d11149314c86191cdcb8">po_map_assertvalid</a>(map);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        map-&gt;refcount += 1;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">if</span> (global_map != NULL) {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                <a class="code" href="libpreopen_8h.xhtml#a5bde5ee82b0d1cedbdb3bf716044978b">po_map_release</a>(global_map);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        global_map = map;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structpo__relpath.xhtml">po_relpath</a></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;find_relative(const char *path, cap_rights_t *rights)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;{</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keyword">struct </span><a class="code" href="structpo__relpath.xhtml">po_relpath</a> rel;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keyword">struct </span><a class="code" href="structpo__map.xhtml">po_map</a> *map;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        map = get_shared_map();</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">if</span> (map == NULL) {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                rel.dirfd = AT_FDCWD;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                rel.relative_path = path;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                rel = <a class="code" href="libpreopen_8h.xhtml#aa829bced964720cf17c5350c643736da">po_find</a>(map, path, NULL);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        }</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordflow">return</span> (rel);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structpo__map.xhtml">po_map</a>*</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;get_shared_map()</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;{</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keyword">struct </span><a class="code" href="structpo__map.xhtml">po_map</a> *map;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordtype">char</span> *end, *env;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keywordtype">long</span> fd;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="comment">// Do we already have a default map?</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        map = <a class="code" href="po__libc__wrappers_8c.xhtml#aa6efc2a19280af103c2ed8f60ac5721b">po_map_get</a>();</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordflow">if</span> (map) {</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keywordflow">return</span> (map);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="comment">// Attempt to unwrap po_map from a shared memory segment specified by</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="comment">// SHARED_MEMORYFD</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        env = getenv(<span class="stringliteral">&quot;SHARED_MEMORYFD&quot;</span>);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">if</span> (env == NULL || *env == <span class="charliteral">&#39;\0&#39;</span>) {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                <span class="keywordflow">return</span> (NULL);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="comment">// We expect this environment variable to be an integer and nothing but</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="comment">// an integer.</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        fd = strtol(env, &amp;end, 10);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">if</span> (*end != <span class="charliteral">&#39;\0&#39;</span>) {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                <span class="keywordflow">return</span> (NULL);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        map = <a class="code" href="libpreopen_8h.xhtml#af11d69efff09c02fc3f3b7bfdeccaa1b">po_unpack</a>(fd);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordflow">if</span> (map == NULL) {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="keywordflow">return</span> (NULL);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <a class="code" href="po__libc__wrappers_8c.xhtml#a8d9b3c7a824de9fdcfaab67f2622aaf2">po_map_set</a>(map);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">return</span> (map);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;}</div><div class="ttc" id="internal_8h_xhtml"><div class="ttname"><a href="internal_8h.xhtml">internal.h</a></div><div class="ttdoc">Declarations of internal data structures and functions. </div></div>
<div class="ttc" id="po__libc__wrappers_8c_xhtml_ad586f56cb2d7d849a4cb20dbd792b543"><div class="ttname"><a href="po__libc__wrappers_8c.xhtml#ad586f56cb2d7d849a4cb20dbd792b543">open</a></div><div class="ttdeci">int open(const char *path, int flags,...)</div><div class="ttdoc">Capability-safe wrapper around the open(2) system call. </div><div class="ttdef"><b>Definition:</b> <a href="po__libc__wrappers_8c_source.xhtml#l00100">po_libc_wrappers.c:100</a></div></div>
<div class="ttc" id="po__libc__wrappers_8c_xhtml_aeff22ad09b35eda92f6c5632300b05da"><div class="ttname"><a href="po__libc__wrappers_8c.xhtml#aeff22ad09b35eda92f6c5632300b05da">access</a></div><div class="ttdeci">int access(const char *path, int mode)</div><div class="ttdoc">Capability-safe wrapper around the access(2) system call. </div><div class="ttdef"><b>Definition:</b> <a href="po__libc__wrappers_8c_source.xhtml#l00081">po_libc_wrappers.c:81</a></div></div>
<div class="ttc" id="libpreopen_8h_xhtml_aa829bced964720cf17c5350c643736da"><div class="ttname"><a href="libpreopen_8h.xhtml#aa829bced964720cf17c5350c643736da">po_find</a></div><div class="ttdeci">struct po_relpath po_find(struct po_map *map, const char *path, cap_rights_t *rights)</div><div class="ttdoc">Find a directory whose path is a prefix of path and (on platforms that support Capsicum) that has the...</div><div class="ttdef"><b>Definition:</b> <a href="libpreopen_8c_source.xhtml#l00085">libpreopen.c:85</a></div></div>
<div class="ttc" id="structpo__map_xhtml"><div class="ttname"><a href="structpo__map.xhtml">po_map</a></div><div class="ttdoc">A mapping from paths to pre-opened directories. </div></div>
<div class="ttc" id="po__err_8c_xhtml_a67a367198c38d11149314c86191cdcb8"><div class="ttname"><a href="po__err_8c.xhtml#a67a367198c38d11149314c86191cdcb8">po_map_assertvalid</a></div><div class="ttdeci">void po_map_assertvalid(const struct po_map *map)</div><div class="ttdef"><b>Definition:</b> <a href="po__err_8c_source.xhtml#l00061">po_err.c:61</a></div></div>
<div class="ttc" id="libpreopen_8h_xhtml_a5bde5ee82b0d1cedbdb3bf716044978b"><div class="ttname"><a href="libpreopen_8h.xhtml#a5bde5ee82b0d1cedbdb3bf716044978b">po_map_release</a></div><div class="ttdeci">void po_map_release(struct po_map *)</div><div class="ttdoc">Release a reference to a po_map. </div><div class="ttdef"><b>Definition:</b> <a href="po__map_8c_source.xhtml#l00103">po_map.c:103</a></div></div>
<div class="ttc" id="po__libc__wrappers_8c_xhtml_aa6efc2a19280af103c2ed8f60ac5721b"><div class="ttname"><a href="po__libc__wrappers_8c.xhtml#aa6efc2a19280af103c2ed8f60ac5721b">po_map_get</a></div><div class="ttdeci">struct po_map * po_map_get()</div><div class="ttdoc">Retrieve (and possibly create) the default map. </div><div class="ttdef"><b>Definition:</b> <a href="po__libc__wrappers_8c_source.xhtml#l00133">po_libc_wrappers.c:133</a></div></div>
<div class="ttc" id="structpo__relpath_xhtml"><div class="ttname"><a href="structpo__relpath.xhtml">po_relpath</a></div><div class="ttdoc">A filesystem path, relative to a directory descriptor. </div><div class="ttdef"><b>Definition:</b> <a href="libpreopen_8h_source.xhtml#l00074">libpreopen.h:74</a></div></div>
<div class="ttc" id="po__libc__wrappers_8c_xhtml_a8d9b3c7a824de9fdcfaab67f2622aaf2"><div class="ttname"><a href="po__libc__wrappers_8c.xhtml#a8d9b3c7a824de9fdcfaab67f2622aaf2">po_map_set</a></div><div class="ttdeci">void po_map_set(struct po_map *map)</div><div class="ttdoc">Set the default map, taking ownership of its memory allocation(s). </div><div class="ttdef"><b>Definition:</b> <a href="po__libc__wrappers_8c_source.xhtml#l00149">po_libc_wrappers.c:149</a></div></div>
<div class="ttc" id="libpreopen_8h_xhtml_af11d69efff09c02fc3f3b7bfdeccaa1b"><div class="ttname"><a href="libpreopen_8h.xhtml#af11d69efff09c02fc3f3b7bfdeccaa1b">po_unpack</a></div><div class="ttdeci">struct po_map * po_unpack(int fd)</div><div class="ttdoc">Unpack a struct po_map from a file. </div><div class="ttdef"><b>Definition:</b> <a href="po__pack_8c_source.xhtml#l00148">po_pack.c:148</a></div></div>
<div class="ttc" id="po__libc__wrappers_8c_xhtml_a8c608fe4dce7b9f98d38263bd30bef56"><div class="ttname"><a href="po__libc__wrappers_8c.xhtml#a8c608fe4dce7b9f98d38263bd30bef56">stat</a></div><div class="ttdeci">int stat(const char *path, struct stat *st)</div><div class="ttdoc">Capability-safe wrapper around the stat(2) system call. </div><div class="ttdef"><b>Definition:</b> <a href="po__libc__wrappers_8c_source.xhtml#l00125">po_libc_wrappers.c:125</a></div></div>
<div class="ttc" id="libpreopen_8h_xhtml_a26cc887be5b3bc545b05b6585d633073"><div class="ttname"><a href="libpreopen_8h.xhtml#a26cc887be5b3bc545b05b6585d633073">po_map_create</a></div><div class="ttdeci">struct po_map * po_map_create(int capacity)</div><div class="ttdoc">Create a po_map of at least the specified capacity. </div><div class="ttdef"><b>Definition:</b> <a href="po__map_8c_source.xhtml#l00044">po_map.c:44</a></div></div>
<div class="ttc" id="structpo__relpath_xhtml_a5315273ae3c6bee251348895e97f951f"><div class="ttname"><a href="structpo__relpath.xhtml#a5315273ae3c6bee251348895e97f951f">po_relpath::relative_path</a></div><div class="ttdeci">const char * relative_path</div><div class="ttdoc">The path, relative to the directory represented by dirfd. </div><div class="ttdef"><b>Definition:</b> <a href="libpreopen_8h_source.xhtml#l00079">libpreopen.h:79</a></div></div>
<div class="ttc" id="structpo__relpath_xhtml_adbfd907732d872907ff53dee0c17dade"><div class="ttname"><a href="structpo__relpath.xhtml#adbfd907732d872907ff53dee0c17dade">po_relpath::dirfd</a></div><div class="ttdeci">int dirfd</div><div class="ttdoc">The directory the path is relative to. </div><div class="ttdef"><b>Definition:</b> <a href="libpreopen_8h_source.xhtml#l00076">libpreopen.h:76</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="po__libc__wrappers_8c.xhtml">po_libc_wrappers.c</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.14 </li>
  </ul>
</div>
</body>
</html>
